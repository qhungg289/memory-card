{"version":3,"sources":["components/ScoreBoard.js","components/Card.js","components/CardContainer.js","App.js","index.js"],"names":["ScoreBoard","score","useState","bestScore","setBestScore","className","Card","name","avatar","onClick","src","alt","CardContainer","pile","drawPile","map","card","App","selectedPile","setSelectedPile","randomizedPile","setRandomizedPile","isGameOver","setIsGameOver","useEffect","mainAssetPile","data","asset","tempPile","randomizedIndex","Math","floor","random","length","some","tempCard","push","randomizedCardFromAsset","newSelectedCard","alreadySelectedCard","isOpen","ariaHideApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"u+IAkBeA,MAff,YAAgC,IAAVC,EAAS,EAATA,MACrB,EAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAMA,OAJIH,EAAQE,GACXC,EAAaH,GAIb,sBAAKI,UAAU,cAAf,UACC,wCAAWJ,KACX,6CAAgBE,S,MCFJG,MATf,YAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAC7B,OACC,sBAAKJ,UAAU,OAAOI,QAAS,kBAAMA,EAAQF,IAA7C,UACC,qBAAKG,IAAKF,EAAQG,IAAI,WACtB,4BAAIJ,Q,MCSQK,MAZf,YAA2C,IAAlBC,EAAiB,EAAjBA,KAAMJ,EAAW,EAAXA,QACxBK,EAAWD,EAAKE,KAAI,SAACC,GAAD,OACzB,cAAC,EAAD,CACCT,KAAMS,EAAKT,KACXC,OAAQQ,EAAKR,OAEbC,QAASA,GADJO,EAAKT,SAIZ,OAAO,qBAAKF,UAAU,iBAAf,SAAiCS,K,iBC2D1BG,MA9Df,WACC,MAAwCf,mBAAS,IAAjD,mBAAOgB,EAAP,KAAqBC,EAArB,KACA,EAA4CjB,mBAAS,IAArD,mBAAOkB,EAAP,KAAuBC,EAAvB,KACA,EAAoCnB,oBAAS,GAA7C,mBAAOoB,EAAP,KAAmBC,EAAnB,KA4CA,OAJAC,qBAAU,YA1BV,WAIC,IAHA,IAAMC,EAAgBC,EAAKC,MACvBC,EAAW,GAFmB,aAKjC,IAAIC,EAAkBC,KAAKC,MAAMD,KAAKE,SAAWP,EAAcQ,QAG7DL,EAASM,MACT,SAACC,GAAD,OAAcA,EAAS5B,OAASkB,EAAcI,GAAiBtB,QAKhEsB,EAAkBC,KAAKC,MAAMD,KAAKE,SAAWP,EAAcQ,QAF3DL,EAASQ,KAAKX,EAAcI,KARvBD,EAASK,OAAS,GAAI,IAc7BZ,EAAkBO,GASlBS,KACE,CAACnB,IAGH,sBAAKb,UAAU,MAAf,UACC,cAAC,EAAD,CAAYJ,MAAOiB,EAAae,SAChC,cAAC,EAAD,CAAepB,KAAMO,EAAgBX,QA7CvC,SAA2B6B,GAExBpB,EAAagB,MACb,SAACK,GAAD,OAAyBD,IAAoBC,KAK9ChB,GAAc,GAFdJ,EAAgB,GAAD,mBAAKD,GAAL,CAAmBoB,QAwClC,eAAC,IAAD,CAAYE,OAAQlB,EAAYmB,aAAa,EAAOpC,UAAU,QAA9D,UACC,2CACA,yCAAYa,EAAae,OAAzB,YACA,wBAAQxB,QAAS,kBAfnBc,GAAc,QACdJ,EAAgB,KAcoBd,UAAU,eAA5C,+BC1DJqC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.dfa01c8b.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"../style/ScoreBoard.css\";\r\n\r\nfunction ScoreBoard({ score }) {\r\n\tconst [bestScore, setBestScore] = useState(0);\r\n\r\n\tif (score > bestScore) {\r\n\t\tsetBestScore(score);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"score-board\">\r\n\t\t\t<p>Score: {score}</p>\r\n\t\t\t<p>Best Score: {bestScore}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import \"../style/Card.css\";\r\n\r\nfunction Card({ name, avatar, onClick }) {\r\n\treturn (\r\n\t\t<div className=\"card\" onClick={() => onClick(name)}>\r\n\t\t\t<img src={avatar} alt=\"Avatar\" />\r\n\t\t\t<p>{name}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import Card from \"./Card\";\r\nimport \"../style/CardContainer.css\";\r\n\r\nfunction CardContainer({ pile, onClick }) {\r\n\tconst drawPile = pile.map((card) => (\r\n\t\t<Card\r\n\t\t\tname={card.name}\r\n\t\t\tavatar={card.avatar}\r\n\t\t\tkey={card.name}\r\n\t\t\tonClick={onClick}\r\n\t\t/>\r\n\t));\r\n\treturn <div className=\"card-container\">{drawPile}</div>;\r\n}\r\n\r\nexport default CardContainer;\r\n","import \"./style/App.css\";\nimport \"./style/Button.css\";\nimport \"./style/Modal.css\";\nimport data from \"./asset.json\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport CardContainer from \"./components/CardContainer\";\nimport ReactModal from \"react-modal\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n\tconst [selectedPile, setSelectedPile] = useState([]);\n\tconst [randomizedPile, setRandomizedPile] = useState([]);\n\tconst [isGameOver, setIsGameOver] = useState(false);\n\n\tfunction checkForDuplicate(newSelectedCard) {\n\t\tif (\n\t\t\t!selectedPile.some(\n\t\t\t\t(alreadySelectedCard) => newSelectedCard === alreadySelectedCard\n\t\t\t)\n\t\t) {\n\t\t\tsetSelectedPile([...selectedPile, newSelectedCard]);\n\t\t} else {\n\t\t\tsetIsGameOver(true);\n\t\t}\n\t}\n\n\tfunction randomizedCardFromAsset() {\n\t\tconst mainAssetPile = data.asset;\n\t\tlet tempPile = [];\n\n\t\twhile (tempPile.length < 6) {\n\t\t\tlet randomizedIndex = Math.floor(Math.random() * mainAssetPile.length);\n\n\t\t\tif (\n\t\t\t\t!tempPile.some(\n\t\t\t\t\t(tempCard) => tempCard.name === mainAssetPile[randomizedIndex].name\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\ttempPile.push(mainAssetPile[randomizedIndex]);\n\t\t\t} else {\n\t\t\t\trandomizedIndex = Math.floor(Math.random() * mainAssetPile.length);\n\t\t\t}\n\t\t}\n\n\t\tsetRandomizedPile(tempPile);\n\t}\n\n\tfunction newGame() {\n\t\tsetIsGameOver(false);\n\t\tsetSelectedPile([]);\n\t}\n\n\tuseEffect(() => {\n\t\trandomizedCardFromAsset();\n\t}, [selectedPile]);\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<ScoreBoard score={selectedPile.length} />\n\t\t\t<CardContainer pile={randomizedPile} onClick={checkForDuplicate} />\n\t\t\t<ReactModal isOpen={isGameOver} ariaHideApp={false} className=\"modal\">\n\t\t\t\t<h3>Game over</h3>\n\t\t\t\t<p>You got {selectedPile.length} score</p>\n\t\t\t\t<button onClick={() => newGame()} className=\"new-game-btn\">\n\t\t\t\t\tPlay again\n\t\t\t\t</button>\n\t\t\t</ReactModal>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}